package ${package};

import com.seven.auth.Pagination;
import com.seven.auth.exception.${service_name_upp}Exception;
import com.seven.auth.response.Response;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

import static com.seven.auth.response.Responder.noContent;
import static com.seven.auth.response.Responder.ok;

@RestController
@RequestMapping("/${domain_low}")
public class ${domain_upp}Controller {
    private final ${domain_upp}Service ${domain_low}Service;
    public ${domain_upp}Controller(${domain_upp}Service ${domain_low}Service) {
        this.${domain_low}Service = ${domain_low}Service;
    }

    @GetMapping
    public ResponseEntity <Response> getResource(@Valid @NotNull @PathVariable(value = "${domain_low}Id") UUID id)  throws ${service_name_upp}Exception {
        ${domain_upp}DTO ${domain_low}DTO = ${domain_low}Service.get(id);
        return ok(${domain_low}DTO);
    }

    @GetMapping
    public ResponseEntity <Response> getResources(Pagination pagination, ${domain_upp}Request.Filter ${domain_low}Filter)  throws ${service_name_upp}Exception {
        Page<${domain_upp}DTO> ${domain_low}DTOs = ${domain_low}Service.getAll(pagination, ${domain_low}Filter);
        return ok(${domain_low}DTOs);
    }

    @PostMapping
    public ResponseEntity <Response> createResource(@Valid @RequestBody ${domain_upp}Request.Create request) throws ${service_name_upp}Exception {
        ${domain_upp}DTO ${domain_low}DTO = ${domain_low}Service.create(request);
        return ok(${domain_low}DTO);
    }

    @PutMapping("/{${domain_low}Id}")
    public ResponseEntity <Response> updateResource(@Valid @NotNull @PathVariable(value = "${domain_low}Id") UUID id, @Valid @RequestBody ${domain_upp}Request.Update request) {
        ${domain_upp}DTO ${domain_low}DTO = ${domain_low}Service.update(id, request);
        return ok(${domain_low}DTO);
    }
    
    @DeleteMapping("{${domain_low}Id}")
    public ResponseEntity <Response> deleteResource(@Valid @NotNull @PathVariable(value = "${domain_low}Id") UUID id) throws ${service_name_upp}Exception {
        ${domain_low}Service.delete(id);
        return noContent();
    }
}